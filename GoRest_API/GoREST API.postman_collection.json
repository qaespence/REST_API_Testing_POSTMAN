{
	"info": {
		"_postman_id": "bbc8502f-2d2f-49b1-8175-91418b42d4eb",
		"name": "GoREST API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "users",
			"item": [
				{
					"name": "HEAD/OPT",
					"item": [
						{
							"name": "Show overview info of the Users listing",
							"request": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Show the supported verbs of Users",
							"request": {
								"method": "OPTIONS",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/1",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										"1"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "List all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ea071d9-bf16-4402-b3c0-59b97e9425c1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "List users by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the name \" + pm.variables.get(\"User_Name\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"User_Name\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/?first_name={{User_Name}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "first_name",
											"value": "{{User_Name}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List users by gender",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"if (pm.variables.get(\"User_Gender\") == \"female\") {",
											"    pm.test(\"Body does not contain \\\"male\\\" in results\", function () { pm.expect(pm.response.text()).to.not.include(\"\\\"male\\\"\"); })",
											"    } else {",
											"    pm.test(\"Body does not contain \\\"female\\\" in results\", function () { pm.expect(pm.response.text()).to.not.include(\"\\\"female\\\"\"); })",
											"}",
											"",
											"pm.test(\"Body contains the gender \" + pm.variables.get(\"User_Gender\") + \" in results\", function () { pm.expect(pm.response.text()).to.include(pm.variables.get(\"User_Gender\")); });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/?gender={{User_Gender}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "gender",
											"value": "{{User_Gender}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List users by DOB",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the year \" + pm.variables.get(\"User_DOB\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"User_DOB\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/?dob={{User_DOB}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "dob",
											"value": "{{User_DOB}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List users by email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the email \" + pm.variables.get(\"User_Email\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"User_Email\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/?email={{User_Email}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "email",
											"value": "{{User_Email}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List users by phone",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the phone number \" + decodeURIComponent(pm.variables.get(\"User_Phone\")) + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(decodeURIComponent(pm.variables.get(\"User_Phone\")));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/?phone={{User_Phone}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "phone",
											"value": "{{User_Phone}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List users by website",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the website \" + pm.variables.get(\"User_Website\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"User_Website\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/?website={{User_Website}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "website",
											"value": "{{User_Website}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List users by address",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the address \" + pm.variables.get(\"User_Address\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"User_Address\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/?address={{User_Address}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "address",
											"value": "{{User_Address}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List users by status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the status \" + pm.variables.get(\"User_Status\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"User_Status\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/?status={{User_Status}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "status",
											"value": "{{User_Status}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the details of user by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/{{User_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										"{{User_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "21055208-f054-47a2-ba2f-2ff52adcc447",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "db26e5d0-e87d-4382-a134-8ad0cf7e339a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Response time is less than 300ms\", function () { pm.expect(pm.response.responseTime).to.be.below(300); });",
									"",
									"pm.test(\"Check for OK message\", function () { pm.expect(pm.response.text()).to.include(\"OK. Everything worked as expected.\"); });",
									"",
									"tests[\"API first_name is Present\"] = responseBody.has(\"first_name\");",
									"tests[\"API last_name is Present\"] = responseBody.has(\"last_name\");",
									"tests[\"API gender is Present\"] = responseBody.has(\"gender\");",
									"tests[\"API DOB is Present\"] = responseBody.has(\"dob\");",
									"tests[\"API email is Present\"] = responseBody.has(\"email\");",
									"tests[\"API phone is Present\"] = responseBody.has(\"phone\");",
									"tests[\"API website is Present\"] = responseBody.has(\"website\");",
									"tests[\"API address is Present\"] = responseBody.has(\"address\");",
									"tests[\"API status is Present\"] = responseBody.has(\"status\");"
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "POST (deprecated)",
					"item": [
						{
							"name": "Create a new user (deprecated)",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"first_name\": \"{{New_User_Firstname}}\",\r\n    \"last_name\": \"{{New_User_Lastname}}\",\r\n    \"gender\": \"{{New_User_Gender}}\",\r\n    \"dob\": \"{{New_User_DOB}}\",\r\n    \"email\": \"{{New_User_Email}}\",\r\n    \"phone\": \"{{New_User_Phone}}\",\r\n    \"website\": \"{{New_User_Website}}\",\r\n    \"address\": \"{{New_User_Address}}\",\r\n    \"status\": \"{{New_User_Status}}\"\r\n}"
								},
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/1930",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										"1930"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cba3de4c-8aaa-453f-8a8c-5d81105102b4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6a08b8e5-cf03-451b-bc5c-1a1234887faa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "PATCH/PUT",
					"item": [
						{
							"name": "Update a user using PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d0ecce0-b7a7-4027-9cae-bcc3b15cfa0a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"OK. Everything worked as expected.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"last_name\": \"{{New_User_Lastname}}\",\r\n    \"dob\": \"{{New_User_DOB}}\",\r\n    \"phone\": \"{{New_User_Phone}}\",\r\n    \"address\": \"{{New_User_Address}}\"\r\n}"
								},
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/{{Update_User_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										"{{Update_User_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a user using PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "188b508c-35d1-47f2-9253-e8d715f34e27",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"OK. Everything worked as expected.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"first_name\": \"{{New_User_Firstname}}\",\r\n    \"last_name\": \"{{New_User_Lastname}}\",\r\n    \"gender\": \"{{New_User_Gender}}\",\r\n    \"dob\": \"{{New_User_DOB}}\",\r\n    \"email\": \"{{New_User_Email}}\",\r\n    \"phone\": \"{{New_User_Phone}}\",\r\n    \"website\": \"{{New_User_Website}}\",\r\n    \"address\": \"{{New_User_Address}}\",\r\n    \"status\": \"{{New_User_Status}}\"\r\n}"
								},
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/{{Update_User_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										"{{Update_User_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "Delete the user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed1219c5-95c2-4ee4-9823-4e7f60a6e298",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The request was handled successfully and the response contains no body content.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/{{Delete_User_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										"{{Delete_User_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Negative Tests",
					"item": [
						{
							"name": "GET",
							"item": [
								{
									"name": "Negative - Return details of user by bad ID (BUGGED)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 300ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(300);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"The requested resource does not exist.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}/{{Users_Endpoint}}/{{Bad_User_ID}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"{{Users_Endpoint}}",
												"{{Bad_User_ID}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "POST (deprecated)",
							"item": [],
							"_postman_isSubFolder": true
						},
						{
							"name": "PATCH/PUT",
							"item": [
								{
									"name": "Negative - Update a user using PATCH, bad ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d0ecce0-b7a7-4027-9cae-bcc3b15cfa0a",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 300ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(300);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"The requested resource does not exist.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"last_name\": \"{{New_User_Lastname}}\",\r\n    \"dob\": \"{{New_User_DOB}}\",\r\n    \"phone\": \"{{New_User_Phone}}\",\r\n    \"address\": \"{{New_User_Address}}\"\r\n}"
										},
										"url": {
											"raw": "{{URL}}/{{Users_Endpoint}}/{{Bad_User_ID}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"{{Users_Endpoint}}",
												"{{Bad_User_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Negative - Update a user using PUT, bad ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "188b508c-35d1-47f2-9253-e8d715f34e27",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 300ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(300);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"The requested resource does not exist.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"first_name\": \"{{New_User_Firstname}}\",\r\n    \"last_name\": \"{{New_User_Lastname}}\",\r\n    \"gender\": \"{{New_User_Gender}}\",\r\n    \"dob\": \"{{New_User_DOB}}\",\r\n    \"email\": \"{{New_User_Email}}\",\r\n    \"phone\": \"{{New_User_Phone}}\",\r\n    \"website\": \"{{New_User_Website}}\",\r\n    \"address\": \"{{New_User_Address}}\",\r\n    \"status\": \"{{New_User_Status}}\"\r\n}"
										},
										"url": {
											"raw": "{{URL}}/{{Users_Endpoint}}/{{Bad_User_ID}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"{{Users_Endpoint}}",
												"{{Bad_User_ID}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "DELETE",
							"item": [
								{
									"name": "Negative - Delete the user but bad ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed1219c5-95c2-4ee4-9823-4e7f60a6e298",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 300ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(300);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"The requested resource does not exist.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL}}/{{Users_Endpoint}}/{{Bad_User_ID}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"{{Users_Endpoint}}",
												"{{Bad_User_ID}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "posts",
			"item": [
				{
					"name": "HEAD/OPT",
					"item": [
						{
							"name": "Show overview info of the Posts listing",
							"request": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Posts_Endpoint}}/",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Posts_Endpoint}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Show the supported verbs of Posts",
							"request": {
								"method": "OPTIONS",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Posts_Endpoint}}/1",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Posts_Endpoint}}",
										"1"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "List all posts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ea071d9-bf16-4402-b3c0-59b97e9425c1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Posts_Endpoint}}/",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Posts_Endpoint}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the details of post by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Posts_Endpoint}}/{{Post_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Posts_Endpoint}}",
										"{{Post_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List posts by user ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the post user id \" + pm.variables.get(\"Post_UserID\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"Post_UserID\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Posts_Endpoint}}/?user_id={{Post_UserID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Posts_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{Post_UserID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List posts by title",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the post title \" + pm.variables.get(\"Post_Title\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"Post_Title\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Posts_Endpoint}}/?title={{Post_Title}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Posts_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "title",
											"value": "{{Post_Title}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List posts by body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the post body contents \" + pm.variables.get(\"Post_Body\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"Post_Body\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Posts_Endpoint}}/?body={{Post_Body}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Posts_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "body",
											"value": "{{Post_Body}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ceb95740-eb4a-4501-bcee-eff3b1000c45",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3697f25e-e33d-4f5a-b32a-0f91cfb3c72d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Response time is less than 300ms\", function () { pm.expect(pm.response.responseTime).to.be.below(300); });",
									"",
									"pm.test(\"Check for OK message\", function () { pm.expect(pm.response.text()).to.include(\"OK. Everything worked as expected.\"); });",
									"",
									"tests[\"API user_id is Present\"] = responseBody.has(\"user_id\");",
									"tests[\"API title is Present\"] = responseBody.has(\"title\");",
									"tests[\"API body is Present\"] = responseBody.has(\"body\");",
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "POST (deprecated)",
					"item": [],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cf47f0bb-84f5-48f1-b1e8-904a8c6e7396",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b65d5dd6-d0af-408b-b05e-5576fe2f767a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "PATCH/PUT",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "Negative Tests",
					"item": [],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "56dddfb8-4110-40b0-b7d4-e5d050ef55dd",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "44c62a1f-d6b6-49cb-af52-14c77780b3e5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "comments",
			"item": [
				{
					"name": "HEAD/OPT",
					"item": [
						{
							"name": "Show overview info of the Comments listing",
							"request": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Comments_Endpoint}}/",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Comments_Endpoint}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Show the supported verbs of Comments",
							"request": {
								"method": "OPTIONS",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Comments_Endpoint}}/1",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Comments_Endpoint}}",
										"1"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "List all comments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ea071d9-bf16-4402-b3c0-59b97e9425c1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Comments_Endpoint}}/",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Comments_Endpoint}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the details of comment by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Comments_Endpoint}}/{{Comment_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Comments_Endpoint}}",
										"{{Comment_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List comments by post ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the comment post id \" + pm.variables.get(\"Comment_PostID\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"Comment_PostID\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Comments_Endpoint}}/?post_id={{Comment_PostID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Comments_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "post_id",
											"value": "{{Comment_PostID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List comments by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the comment name \" + pm.variables.get(\"Comment_Name\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"Comment_Name\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Comments_Endpoint}}/?name={{Comment_Name}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Comments_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "name",
											"value": "{{Comment_Name}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List comments by email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the comment email \" + pm.variables.get(\"Comment_Email\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"Comment_Email\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Comments_Endpoint}}/?email={{Comment_Email}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Comments_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "email",
											"value": "{{Comment_Email}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List comments by body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the comment body \" + pm.variables.get(\"Comment_Body\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"Comment_Body\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Comments_Endpoint}}/?body={{Comment_Body}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Comments_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "body",
											"value": "{{Comment_Body}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "472e7d03-3ce4-44f2-bdbd-b433189d5913",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "870d44d6-f9ad-4aa2-8a0f-12e0f5de5ee6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Response time is less than 300ms\", function () { pm.expect(pm.response.responseTime).to.be.below(300); });",
									"",
									"pm.test(\"Check for OK message\", function () { pm.expect(pm.response.text()).to.include(\"OK. Everything worked as expected.\"); });",
									"",
									"tests[\"API post_id is Present\"] = responseBody.has(\"post_id\");",
									"tests[\"API name is Present\"] = responseBody.has(\"name\");",
									"tests[\"API email is Present\"] = responseBody.has(\"email\");",
									"tests[\"API body is Present\"] = responseBody.has(\"body\");",
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "albums",
			"item": [
				{
					"name": "HEAD/OPT",
					"item": [
						{
							"name": "Show overview info of the Albums listing",
							"request": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Albums_Endpoint}}/",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Albums_Endpoint}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Show the supported verbs of Albums",
							"request": {
								"method": "OPTIONS",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Albums_Endpoint}}/1",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Albums_Endpoint}}",
										"1"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "List all albums",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ea071d9-bf16-4402-b3c0-59b97e9425c1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Albums_Endpoint}}/",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Albums_Endpoint}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the details of album by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Albums_Endpoint}}/{{Album_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Albums_Endpoint}}",
										"{{Album_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List albums by user ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the album user id \" + pm.variables.get(\"Album_UserID\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"Album_UserID\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Albums_Endpoint}}/?user_id={{Album_UserID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Albums_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{Album_UserID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List albums by title",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the post title \" + pm.variables.get(\"Album_Title\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"Album_Title\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Albums_Endpoint}}/?title={{Album_Title}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Albums_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "title",
											"value": "{{Album_Title}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2709583a-6115-475a-bf97-0d735512a686",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3139e056-6565-4d58-9246-08e264cfb799",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Response time is less than 300ms\", function () { pm.expect(pm.response.responseTime).to.be.below(300); });",
									"",
									"pm.test(\"Check for OK message\", function () { pm.expect(pm.response.text()).to.include(\"OK. Everything worked as expected.\"); });",
									"",
									"tests[\"API user_id is Present\"] = responseBody.has(\"user_id\");",
									"tests[\"API title is Present\"] = responseBody.has(\"title\");",
									"",
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "photos",
			"item": [
				{
					"name": "HEAD/OPT",
					"item": [
						{
							"name": "Show overview info of the Photos listing",
							"request": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Photos_Endpoint}}/",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Photos_Endpoint}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Show the supported verbs of Photos",
							"request": {
								"method": "OPTIONS",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Photos_Endpoint}}/1",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Photos_Endpoint}}",
										"1"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "List all Photos",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ea071d9-bf16-4402-b3c0-59b97e9425c1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Photos_Endpoint}}/",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Photos_Endpoint}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the details of photo by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Photos_Endpoint}}/{{Photo_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Photos_Endpoint}}",
										"{{Photo_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List photos by album ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the album id \" + pm.variables.get(\"Photo_AlbumID\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"Photo_AlbumID\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Photos_Endpoint}}/?album_id={{Photo_AlbumID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Photos_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "album_id",
											"value": "{{Photo_AlbumID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List photos by title",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the photo title \" + pm.variables.get(\"Photo_Title\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"Photo_Title\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Photos_Endpoint}}/?title={{Photo_Title}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Photos_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "title",
											"value": "{{Photo_Title}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List photos by url",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the photo url \" + pm.variables.get(\"Photo_Url\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"Photo_Url\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Photos_Endpoint}}/?url={{Photo_Url}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Photos_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "url",
											"value": "{{Photo_Url}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List photos by thumbnail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the photo thumbnail \" + pm.variables.get(\"Photo_Thumbnail\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"Photo_Thumbnail\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Photos_Endpoint}}/?thumbnail={{Photo_Thumbnail}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Photos_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "thumbnail",
											"value": "{{Photo_Thumbnail}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eef9a86d-6c00-4dec-9166-6b90cf2c2ce2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6185b71c-dd6b-4e79-9052-0a2470bc0f5c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Response time is less than 300ms\", function () { pm.expect(pm.response.responseTime).to.be.below(300); });",
									"",
									"pm.test(\"Check for OK message\", function () { pm.expect(pm.response.text()).to.include(\"OK. Everything worked as expected.\"); });",
									"",
									"tests[\"API album_id is Present\"] = responseBody.has(\"album_id\");",
									"tests[\"API title is Present\"] = responseBody.has(\"title\");",
									"tests[\"API url is Present\"] = responseBody.has(\"url\");",
									"tests[\"API thumbnail is Present\"] = responseBody.has(\"thumbnail\");",
									"",
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "OCcRe6cGpZXuzm0KhBRaJ_nTUnjt4lbDb6Aa",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "0f858c68-b15e-46d0-b47a-12295c536f14",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "c0a8a227-b058-43d1-834e-cb727c0d1eda",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "c9e875ff-fc09-4ac3-9cf0-383d66fa994b",
			"key": "User_Name",
			"value": "John",
			"type": "string"
		},
		{
			"id": "cdb26277-898b-45aa-8496-a45c06a985e1",
			"key": "Users_Endpoint",
			"value": "public-api/users",
			"type": "string"
		},
		{
			"id": "ca75cf18-9101-4803-b3bb-1c2db6c5a17a",
			"key": "New_User_Firstname",
			"value": "Tod",
			"type": "string"
		},
		{
			"id": "8054c9e4-53f9-465e-8128-11fdea32cea9",
			"key": "New_User_Lastname",
			"value": "Doh",
			"type": "string"
		},
		{
			"id": "c5b9ef58-8a80-4584-a8da-be4c3d3a8f2a",
			"key": "New_User_Gender",
			"value": "male",
			"type": "string"
		},
		{
			"id": "03f6ac45-2d74-4e6d-9930-d3f09393814b",
			"key": "New_User_DOB",
			"value": "1977-01-01",
			"type": "string"
		},
		{
			"id": "6fa84061-fe3b-40d0-8ba4-8ad0bd4a068f",
			"key": "New_User_Email",
			"value": "tester@test.com",
			"type": "string"
		},
		{
			"id": "4f0ff7f1-79ac-4505-a7e2-b8e354b1072b",
			"key": "New_User_Phone",
			"value": "(123) 456-7890",
			"type": "string"
		},
		{
			"id": "8700b104-5490-4d3c-8c29-3c5e2417b3ce",
			"key": "New_User_Website",
			"value": "https://www.someplace.com/index.html",
			"type": "string"
		},
		{
			"id": "ab6d0a74-fa27-41d6-804a-57f9720e3cce",
			"key": "New_User_Address",
			"value": "1234 5th Street, New City, CA 90001",
			"type": "string"
		},
		{
			"id": "c165a769-c78a-47a7-9b76-e71f48b197b7",
			"key": "New_User_Status",
			"value": "active",
			"type": "string"
		},
		{
			"id": "64145b05-f3b9-4d64-b0ed-ea3b9c7d9e55",
			"key": "User_ID",
			"value": "4",
			"type": "string"
		},
		{
			"id": "bb0bcaef-059a-4203-8fe1-0789ad40f724",
			"key": "User_Gender",
			"value": "female",
			"type": "string"
		},
		{
			"id": "92adc3b0-7fce-49ff-a7ca-3e4b9629ec8d",
			"key": "User_DOB",
			"value": "1980",
			"type": "string"
		},
		{
			"id": "1e980d14-5bce-4d4d-a2a0-7f45e05816ec",
			"key": "User_Email",
			"value": "@example",
			"type": "string"
		},
		{
			"id": "6cd1caac-28e0-4e0b-8651-974fb0aeb6b9",
			"key": "User_Phone",
			"value": "%2B1",
			"type": "string"
		},
		{
			"id": "0f6e2abe-73c0-49db-b3cd-4b6bd95f1ab4",
			"key": "User_Website",
			"value": "zieme.com",
			"type": "string"
		},
		{
			"id": "edf84fde-0e38-4fe2-905e-1c566486db8b",
			"key": "User_Address",
			"value": ", CA",
			"type": "string"
		},
		{
			"id": "af1a93db-2225-4db6-b7f7-28a88fda876b",
			"key": "User_Status",
			"value": "inactive",
			"type": "string"
		},
		{
			"id": "038cde7f-5089-4b00-9a06-4a23a4c6009c",
			"key": "Bad_User_ID",
			"value": "4567",
			"type": "string"
		},
		{
			"id": "6eec2926-c854-48d8-b172-0ff79c53c15e",
			"key": "Delete_User_ID",
			"value": "123",
			"type": "string"
		},
		{
			"id": "b4cd78a6-ead8-42a8-afd1-85f102ac1d83",
			"key": "Update_User_ID",
			"value": "500",
			"type": "string"
		},
		{
			"id": "b5e9e023-f0e5-44e3-9851-91be6011c42f",
			"key": "Posts_Endpoint",
			"value": "public-api/posts",
			"type": "string"
		},
		{
			"id": "50051a56-b992-4c6d-a931-8ab7de4c32e0",
			"key": "Post_ID",
			"value": "4",
			"type": "string"
		},
		{
			"id": "da18e073-0927-4c01-b93a-592ad2aa551b",
			"key": "Post_UserID",
			"value": "390",
			"type": "string"
		},
		{
			"id": "8db1906a-ffd9-4fed-b4a5-5b47c300add9",
			"key": "Post_Title",
			"value": "ipsum",
			"type": "string"
		},
		{
			"id": "35bf8dea-b4ea-4556-b86a-44e0c607cdb2",
			"key": "Post_Body",
			"value": "consequatur",
			"type": "string"
		},
		{
			"id": "7aeb60ec-d9e1-4c87-a304-5f699cac3ef2",
			"key": "Comments_Endpoint",
			"value": "public-api/comments",
			"type": "string"
		},
		{
			"id": "f9427019-5dac-4d6a-92c1-6b4456f6acb2",
			"key": "Comment_ID",
			"value": "3",
			"type": "string"
		},
		{
			"id": "8888e892-c217-49fc-b691-312b04aaf955",
			"key": "Comment_PostID",
			"value": "2790",
			"type": "string"
		},
		{
			"id": "ba8bbe03-712b-4b9b-ae0b-686079e713e5",
			"key": "Comment_Name",
			"value": "Maximillian",
			"type": "string"
		},
		{
			"id": "8275153e-c127-4813-8244-adc3df45aa61",
			"key": "Comment_Email",
			"value": "@hotmail.com",
			"type": "string"
		},
		{
			"id": "0b11cbc8-5027-4abd-ba27-0d02f765325d",
			"key": "Comment_Body",
			"value": "veritatis",
			"type": "string"
		},
		{
			"id": "9a0c3454-a7c4-489e-ac65-4c462f9d6532",
			"key": "Albums_Endpoint",
			"value": "public-api/albums",
			"type": "string"
		},
		{
			"id": "53a4fcf6-57a4-44d5-8734-309bc4e502a8",
			"key": "Album_ID",
			"value": "17",
			"type": "string"
		},
		{
			"id": "1e32acbb-98fd-4bf9-bf02-78f81b0b6c80",
			"key": "Album_UserID",
			"value": "1115",
			"type": "string"
		},
		{
			"id": "8f952ae6-7ff8-4e9e-95aa-ccd27af27c97",
			"key": "Album_Title",
			"value": "quidem",
			"type": "string"
		},
		{
			"id": "8b5aff71-8ae4-4b35-bbf2-d3b007587a88",
			"key": "Photos_Endpoint",
			"value": "public-api/photos",
			"type": "string"
		},
		{
			"id": "25291681-1428-49ab-a7b6-a1d2adf43ace",
			"key": "Photo_ID",
			"value": "6",
			"type": "string"
		},
		{
			"id": "2332ca64-2d6f-45ad-82cd-7e11bc590331",
			"key": "Photo_AlbumID",
			"value": "970",
			"type": "string"
		},
		{
			"id": "710d3ecb-3ee2-428e-bdb0-935c2ef29517",
			"key": "Photo_Title",
			"value": "dolorem",
			"type": "string"
		},
		{
			"id": "c12b37fe-b29c-4e80-ab9a-861ec8a4d76b",
			"key": "Photo_Url",
			"value": "lorempixel.com",
			"type": "string"
		},
		{
			"id": "059ecd20-17ea-48f5-801a-a07591358abc",
			"key": "Photo_Thumbnail",
			"value": "lorempixel.com",
			"type": "string"
		}
	]
}