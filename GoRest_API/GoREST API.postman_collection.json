{
	"info": {
		"_postman_id": "bbc8502f-2d2f-49b1-8175-91418b42d4eb",
		"name": "GoREST API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "users",
			"item": [
				{
					"name": "HEAD/OPT",
					"item": [
						{
							"name": "Show overview info of the Users listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4972e23e-2f4c-4cae-934d-672e94afc0f2",
										"exec": [
											"pm.test(\"Response time is less than 300ms\", function () { pm.expect(pm.response.responseTime).to.be.below(300); });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Show the supported verbs of Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3177b856-661d-4c08-bb6b-9d990c73f79e",
										"exec": [
											"pm.test(\"Response time is less than 900ms\", function () { pm.expect(pm.response.responseTime).to.be.below(900); });",
											"",
											"pm.test(\"Check for OK message\", function () { pm.expect(pm.response.text()).to.include(\"OK. Everything worked as expected.\"); });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "OPTIONS",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/1",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										"1"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7242cc73-e0e9-470a-8a0d-1766f65ee582",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "49a38562-d905-44ca-840c-c943466ffbe6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });"
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "List all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ea071d9-bf16-4402-b3c0-59b97e9425c1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "List users by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the name \" + pm.variables.get(\"User_Name\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"User_Name\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/?first_name={{User_Name}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "first_name",
											"value": "{{User_Name}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List users by gender",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"if (pm.variables.get(\"User_Gender\") == \"female\") {",
											"    pm.test(\"Body does not contain \\\"male\\\" in results\", function () { pm.expect(pm.response.text()).to.not.include(\"\\\"male\\\"\"); })",
											"    } else {",
											"    pm.test(\"Body does not contain \\\"female\\\" in results\", function () { pm.expect(pm.response.text()).to.not.include(\"\\\"female\\\"\"); })",
											"}",
											"",
											"pm.test(\"Body contains the gender \" + pm.variables.get(\"User_Gender\") + \" in results\", function () { pm.expect(pm.response.text()).to.include(pm.variables.get(\"User_Gender\")); });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/?gender={{User_Gender}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "gender",
											"value": "{{User_Gender}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List users by DOB",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the year \" + pm.variables.get(\"User_DOB\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"User_DOB\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/?dob={{User_DOB}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "dob",
											"value": "{{User_DOB}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List users by email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the email \" + pm.variables.get(\"User_Email\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"User_Email\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/?email={{User_Email}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "email",
											"value": "{{User_Email}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List users by phone",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the phone number \" + decodeURIComponent(pm.variables.get(\"User_Phone\")) + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(decodeURIComponent(pm.variables.get(\"User_Phone\")));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/?phone={{User_Phone}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "phone",
											"value": "{{User_Phone}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List users by website",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the website \" + pm.variables.get(\"User_Website\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"User_Website\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/?website={{User_Website}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "website",
											"value": "{{User_Website}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List users by address",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the address \" + pm.variables.get(\"User_Address\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"User_Address\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/?address={{User_Address}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "address",
											"value": "{{User_Address}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List users by status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the status \" + pm.variables.get(\"User_Status\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"User_Status\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/?status={{User_Status}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "status",
											"value": "{{User_Status}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the details of user by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/{{User_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										"{{User_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "21055208-f054-47a2-ba2f-2ff52adcc447",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"User_ID\", \"5\");",
									"pm.globals.set(\"User_Name\", \"John\");",
									"pm.globals.set(\"User_Gender\", \"female\");",
									"pm.globals.set(\"User_DOB\", \"1980\");",
									"pm.globals.set(\"User_Email\", \"@example\");",
									"pm.globals.set(\"User_Phone\", \"%2B1\");",
									"pm.globals.set(\"User_Website\", \"zieme.com\");",
									"pm.globals.set(\"User_Address\", \", CA\");",
									"pm.globals.set(\"User_Status\", \"inactive\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "db26e5d0-e87d-4382-a134-8ad0cf7e339a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Response time is less than 300ms\", function () { pm.expect(pm.response.responseTime).to.be.below(300); });",
									"",
									"pm.test(\"Check for OK message\", function () { pm.expect(pm.response.text()).to.include(\"OK. Everything worked as expected.\"); });",
									"",
									"tests[\"API first_name is Present\"] = responseBody.has(\"first_name\");",
									"tests[\"API last_name is Present\"] = responseBody.has(\"last_name\");",
									"tests[\"API gender is Present\"] = responseBody.has(\"gender\");",
									"tests[\"API DOB is Present\"] = responseBody.has(\"dob\");",
									"tests[\"API email is Present\"] = responseBody.has(\"email\");",
									"tests[\"API phone is Present\"] = responseBody.has(\"phone\");",
									"tests[\"API website is Present\"] = responseBody.has(\"website\");",
									"tests[\"API address is Present\"] = responseBody.has(\"address\");",
									"tests[\"API status is Present\"] = responseBody.has(\"status\");"
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "PATCH/PUT",
					"item": [
						{
							"name": "Backup User Entry",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.globals.set(\"savedData\", JSON.stringify(jsonData.result));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/{{Update_User_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										"{{Update_User_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a user using PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d0ecce0-b7a7-4027-9cae-bcc3b15cfa0a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"OK. Everything worked as expected.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"last_name\": \"{{New_User_Lastname}}\",\r\n    \"dob\": \"{{New_User_DOB}}\",\r\n    \"phone\": \"{{New_User_Phone}}\",\r\n    \"address\": \"{{New_User_Address}}\"\r\n}"
								},
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/{{Update_User_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										"{{Update_User_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Restore User from Backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d0ecce0-b7a7-4027-9cae-bcc3b15cfa0a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"OK. Everything worked as expected.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ab840253-4141-408a-bb7d-0c6ca708c899",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{savedData}}"
								},
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/{{Update_User_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										"{{Update_User_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Backup User Entry",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.globals.set(\"savedData\", JSON.stringify(jsonData.result));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/{{Update_User_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										"{{Update_User_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a user using PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "188b508c-35d1-47f2-9253-e8d715f34e27",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"OK. Everything worked as expected.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"first_name\": \"{{New_User_Firstname}}\",\r\n    \"last_name\": \"{{New_User_Lastname}}\",\r\n    \"gender\": \"{{New_User_Gender}}\",\r\n    \"dob\": \"{{New_User_DOB}}\",\r\n    \"email\": \"{{New_User_Email}}\",\r\n    \"phone\": \"{{New_User_Phone}}\",\r\n    \"website\": \"{{New_User_Website}}\",\r\n    \"address\": \"{{New_User_Address}}\",\r\n    \"status\": \"{{New_User_Status}}\"\r\n}"
								},
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/{{Update_User_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										"{{Update_User_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Restore User from Backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d0ecce0-b7a7-4027-9cae-bcc3b15cfa0a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"OK. Everything worked as expected.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ab840253-4141-408a-bb7d-0c6ca708c899",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{savedData}}"
								},
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/{{Update_User_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										"{{Update_User_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a3a587b5-55c8-479e-83de-078e39d39030",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"Update_User_ID\", \"501\");",
									"",
									"pm.globals.set(\"New_User_Firstname\", \"Tod\");",
									"pm.globals.set(\"New_User_Lastname\", \"Doh\")",
									"pm.globals.set(\"New_User_Gender\", \"male\");",
									"pm.globals.set(\"New_User_DOB\", \"1977-01-01\");",
									"pm.globals.set(\"New_User_Email\", \"tester@test.com\");",
									"pm.globals.set(\"New_User_Phone\", \"(123) 456-7890\");",
									"pm.globals.set(\"New_User_Website\", \"https://www.someplace.com/index.html\");",
									"pm.globals.set(\"New_User_Address\", \"1234 5th Street, New City, CA 90001\");",
									"pm.globals.set(\"New_User_Status\", \"active\");",
									"",
									"// pm.globals.set(\"Backup_User_Firstname\", \"Camron\");",
									"// pm.globals.set(\"Backup_User_Lastname\", \"Bergstrom\")",
									"// pm.globals.set(\"Backup_User_Gender\", \"male\");",
									"// pm.globals.set(\"Backup_User_DOB\", \"1998-07-26\");",
									"// pm.globals.set(\"Backup_User_Email\", \"herminia.auer@example.com\");",
									"// pm.globals.set(\"Backup_User_Phone\", \"+1-331-695-7378\");",
									"// pm.globals.set(\"Backup_User_Website\", \"https://www.someplace.com/index.html\");",
									"// pm.globals.set(\"Backup_User_Address\", \"642 Emely Point%0D%0AWestmouth, KS 75125\");",
									"// pm.globals.set(\"Backup_User_Status\", \"inactive\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cf868084-cc10-4600-bd7f-b80eda3d6a17",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "Delete the user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed1219c5-95c2-4ee4-9823-4e7f60a6e298",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The request was handled successfully and the response contains no body content.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Users_Endpoint}}/{{Delete_User_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Users_Endpoint}}",
										"{{Delete_User_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d3fce909-dc56-4cae-ad1b-320ef0958177",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"Delete_User_ID\", \"123\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ea8e4757-a648-4290-ad19-8ff2b1028222",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Negative Tests",
					"item": [
						{
							"name": "GET",
							"item": [
								{
									"name": "Negative - Return details of user by bad ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 400ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(400);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"The requested resource does not exist.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}/{{Users_Endpoint}}/{{Bad_User_ID}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"{{Users_Endpoint}}",
												"{{Bad_User_ID}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "PATCH/PUT",
							"item": [
								{
									"name": "Negative - Update a user using PATCH, bad ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d0ecce0-b7a7-4027-9cae-bcc3b15cfa0a",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 300ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(300);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"The requested resource does not exist.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"last_name\": \"{{New_User_Lastname}}\",\r\n    \"dob\": \"{{New_User_DOB}}\",\r\n    \"phone\": \"{{New_User_Phone}}\",\r\n    \"address\": \"{{New_User_Address}}\"\r\n}"
										},
										"url": {
											"raw": "{{URL}}/{{Users_Endpoint}}/{{Bad_User_ID}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"{{Users_Endpoint}}",
												"{{Bad_User_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Negative - Update a user using PUT, bad ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "188b508c-35d1-47f2-9253-e8d715f34e27",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 300ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(300);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"The requested resource does not exist.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"first_name\": \"{{New_User_Firstname}}\",\r\n    \"last_name\": \"{{New_User_Lastname}}\",\r\n    \"gender\": \"{{New_User_Gender}}\",\r\n    \"dob\": \"{{New_User_DOB}}\",\r\n    \"email\": \"{{New_User_Email}}\",\r\n    \"phone\": \"{{New_User_Phone}}\",\r\n    \"website\": \"{{New_User_Website}}\",\r\n    \"address\": \"{{New_User_Address}}\",\r\n    \"status\": \"{{New_User_Status}}\"\r\n}"
										},
										"url": {
											"raw": "{{URL}}/{{Users_Endpoint}}/{{Bad_User_ID}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"{{Users_Endpoint}}",
												"{{Bad_User_ID}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "DELETE",
							"item": [
								{
									"name": "Negative - Delete the user but bad ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed1219c5-95c2-4ee4-9823-4e7f60a6e298",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 300ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(300);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"The requested resource does not exist.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL}}/{{Users_Endpoint}}/{{Bad_User_ID}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"{{Users_Endpoint}}",
												"{{Bad_User_ID}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a61f51a5-7c2b-4e93-9c02-ab7a65490b34",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"Bad_User_ID\", \"4567\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9bc4d913-a2f8-4cc5-a5e2-224e4db23c9f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "71ed1dbe-764b-4052-8112-ec11f7ed4aff",
						"type": "text/javascript",
						"exec": [
							"pm.globals.set(\"Users_Endpoint\", \"public-api/users\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "256ee6ff-f268-428b-afaf-d0856b235f5c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "posts",
			"item": [
				{
					"name": "HEAD/OPT",
					"item": [
						{
							"name": "Show overview info of the Posts listing",
							"request": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Posts_Endpoint}}/",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Posts_Endpoint}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Show the supported verbs of Posts",
							"request": {
								"method": "OPTIONS",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Posts_Endpoint}}/1",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Posts_Endpoint}}",
										"1"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "List all posts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ea071d9-bf16-4402-b3c0-59b97e9425c1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Posts_Endpoint}}/",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Posts_Endpoint}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the details of post by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Posts_Endpoint}}/{{Post_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Posts_Endpoint}}",
										"{{Post_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List posts by user ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the post user id \" + pm.variables.get(\"Post_UserID\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"Post_UserID\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Posts_Endpoint}}/?user_id={{Post_UserID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Posts_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{Post_UserID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List posts by title",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the post title \" + pm.variables.get(\"Post_Title\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"Post_Title\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Posts_Endpoint}}/?title={{Post_Title}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Posts_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "title",
											"value": "{{Post_Title}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List posts by body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the post body contents \" + pm.variables.get(\"Post_Body\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"Post_Body\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Posts_Endpoint}}/?body={{Post_Body}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Posts_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "body",
											"value": "{{Post_Body}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ceb95740-eb4a-4501-bcee-eff3b1000c45",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"Post_ID\", \"4\");",
									"pm.globals.set(\"Post_UserID\", \"390\");",
									"pm.globals.set(\"Post_Title\", \"ipsum\");",
									"pm.globals.set(\"Post_Body\", \"consequatur\");",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3697f25e-e33d-4f5a-b32a-0f91cfb3c72d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Response time is less than 300ms\", function () { pm.expect(pm.response.responseTime).to.be.below(300); });",
									"",
									"pm.test(\"Check for OK message\", function () { pm.expect(pm.response.text()).to.include(\"OK. Everything worked as expected.\"); });",
									"",
									"tests[\"API user_id is Present\"] = responseBody.has(\"user_id\");",
									"tests[\"API title is Present\"] = responseBody.has(\"title\");",
									"tests[\"API body is Present\"] = responseBody.has(\"body\");",
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "PATCH/PUT",
					"item": [
						{
							"name": "Backup Post Entry",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.globals.set(\"savedData\", JSON.stringify(jsonData.result));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Posts_Endpoint}}/{{Update_Post_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Posts_Endpoint}}",
										"{{Update_Post_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a post using PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d0ecce0-b7a7-4027-9cae-bcc3b15cfa0a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"OK. Everything worked as expected.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user_id\": \"{{New_Post_UserID}}\",\r\n    \"title\": \"{{New_Post_Title}}\"\r\n}"
								},
								"url": {
									"raw": "{{URL}}/{{Posts_Endpoint}}/{{Update_Post_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Posts_Endpoint}}",
										"{{Update_Post_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Restore Post from Backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d0ecce0-b7a7-4027-9cae-bcc3b15cfa0a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"OK. Everything worked as expected.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ab840253-4141-408a-bb7d-0c6ca708c899",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{savedData}}"
								},
								"url": {
									"raw": "{{URL}}/{{Posts_Endpoint}}/{{Update_Post_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Posts_Endpoint}}",
										"{{Update_Post_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Backup Post Entry",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.globals.set(\"savedData\", JSON.stringify(jsonData.result));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Posts_Endpoint}}/{{Update_Post_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Posts_Endpoint}}",
										"{{Update_Post_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a post using PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d0ecce0-b7a7-4027-9cae-bcc3b15cfa0a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"OK. Everything worked as expected.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user_id\": \"{{New_Post_UserID}}\",\r\n    \"title\": \"{{New_Post_Title}}\",\r\n    \"body\": \"{{New_Post_Body}}\"\r\n}"
								},
								"url": {
									"raw": "{{URL}}/{{Posts_Endpoint}}/{{Update_Post_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Posts_Endpoint}}",
										"{{Update_Post_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Restore Post from Backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d0ecce0-b7a7-4027-9cae-bcc3b15cfa0a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"OK. Everything worked as expected.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ab840253-4141-408a-bb7d-0c6ca708c899",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{savedData}}"
								},
								"url": {
									"raw": "{{URL}}/{{Posts_Endpoint}}/{{Update_Post_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Posts_Endpoint}}",
										"{{Update_Post_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "36359e8f-0330-4e89-8c1b-46273ab0d2e5",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"Update_Post_ID\", \"18\");",
									"",
									"pm.globals.set(\"New_Post_UserID\", \"123\");",
									"pm.globals.set(\"New_Post_Title\", \"This is a test title\")",
									"pm.globals.set(\"New_Post_Body\", \"This is a test body section of text that is reall really long...\");",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6fd0d0c4-8f68-42d7-8daf-2bffa663b57f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "Delete the post",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed1219c5-95c2-4ee4-9823-4e7f60a6e298",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The request was handled successfully and the response contains no body content.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Posts_Endpoint}}/{{Delete_Post_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Posts_Endpoint}}",
										"{{Delete_Post_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "705295ab-d0a6-4a4a-b8c5-e8d2e1f34e2f",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"Delete_Post_ID\", \"1\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fe111b13-f29f-4e54-bc2b-9ad9207e7bcc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Negative Tests",
					"item": [
						{
							"name": "GET",
							"item": [
								{
									"name": "Negative - Return details of Post by bad ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 400ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(400);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"The requested resource does not exist.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}/{{Posts_Endpoint}}/{{Bad_Post_ID}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"{{Posts_Endpoint}}",
												"{{Bad_Post_ID}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "PATCH/PUT",
							"item": [
								{
									"name": "Negative - Update a post using PATCH, bad ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d0ecce0-b7a7-4027-9cae-bcc3b15cfa0a",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 300ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(300);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"The requested resource does not exist.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"user_id\": \"{{New_Post_UserID}}\",\r\n    \"title\": \"{{New_Post_Title}}\",\r\n    \"body\": \"{{New_Post_Body}}\"\r\n}"
										},
										"url": {
											"raw": "{{URL}}/{{Posts_Endpoint}}/{{Bad_Post_ID}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"{{Posts_Endpoint}}",
												"{{Bad_Post_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Negative - Update a post using PUT, bad ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "188b508c-35d1-47f2-9253-e8d715f34e27",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 300ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(300);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"The requested resource does not exist.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"user_id\": \"{{New_Post_UserID}}\",\r\n    \"title\": \"{{New_Post_Title}}\",\r\n    \"body\": \"{{New_Post_Body}}\"\r\n}"
										},
										"url": {
											"raw": "{{URL}}/{{Posts_Endpoint}}/{{Bad_Post_ID}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"{{Posts_Endpoint}}",
												"{{Bad_Post_ID}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "DELETE",
							"item": [
								{
									"name": "Negative - Delete the post but bad ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed1219c5-95c2-4ee4-9823-4e7f60a6e298",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 300ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(300);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"The requested resource does not exist.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL}}/{{Posts_Endpoint}}/{{Bad_Post_ID}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"{{Posts_Endpoint}}",
												"{{Bad_Post_ID}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "679fa660-7ca0-48cd-ba95-33f496b4f1a2",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"Bad_Post_ID\", \"4567\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0ac89e2e-a2ee-4cd0-91b7-f7d9725a063d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "56dddfb8-4110-40b0-b7d4-e5d050ef55dd",
						"type": "text/javascript",
						"exec": [
							"pm.globals.set(\"Posts_Endpoint\", \"public-api/posts\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "44c62a1f-d6b6-49cb-af52-14c77780b3e5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "comments",
			"item": [
				{
					"name": "HEAD/OPT",
					"item": [
						{
							"name": "Show overview info of the Comments listing",
							"request": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Comments_Endpoint}}/",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Comments_Endpoint}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Show the supported verbs of Comments",
							"request": {
								"method": "OPTIONS",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Comments_Endpoint}}/1",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Comments_Endpoint}}",
										"1"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "List all comments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ea071d9-bf16-4402-b3c0-59b97e9425c1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Comments_Endpoint}}/",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Comments_Endpoint}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the details of comment by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Comments_Endpoint}}/{{Comment_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Comments_Endpoint}}",
										"{{Comment_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List comments by post ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the comment post id \" + pm.variables.get(\"Comment_PostID\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"Comment_PostID\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Comments_Endpoint}}/?post_id={{Comment_PostID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Comments_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "post_id",
											"value": "{{Comment_PostID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List comments by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the comment name \" + pm.variables.get(\"Comment_Name\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"Comment_Name\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Comments_Endpoint}}/?name={{Comment_Name}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Comments_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "name",
											"value": "{{Comment_Name}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List comments by email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the comment email \" + pm.variables.get(\"Comment_Email\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"Comment_Email\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Comments_Endpoint}}/?email={{Comment_Email}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Comments_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "email",
											"value": "{{Comment_Email}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List comments by body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the comment body \" + pm.variables.get(\"Comment_Body\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"Comment_Body\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Comments_Endpoint}}/?body={{Comment_Body}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Comments_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "body",
											"value": "{{Comment_Body}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "472e7d03-3ce4-44f2-bdbd-b433189d5913",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "870d44d6-f9ad-4aa2-8a0f-12e0f5de5ee6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Response time is less than 300ms\", function () { pm.expect(pm.response.responseTime).to.be.below(300); });",
									"",
									"pm.test(\"Check for OK message\", function () { pm.expect(pm.response.text()).to.include(\"OK. Everything worked as expected.\"); });",
									"",
									"tests[\"API post_id is Present\"] = responseBody.has(\"post_id\");",
									"tests[\"API name is Present\"] = responseBody.has(\"name\");",
									"tests[\"API email is Present\"] = responseBody.has(\"email\");",
									"tests[\"API body is Present\"] = responseBody.has(\"body\");",
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "PATCH/PUT",
					"item": [
						{
							"name": "Backup Comment Entry",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.globals.set(\"savedData\", JSON.stringify(jsonData.result));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Comments_Endpoint}}/{{Update_Comment_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Comments_Endpoint}}",
										"{{Update_Comment_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a comment using PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d0ecce0-b7a7-4027-9cae-bcc3b15cfa0a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"OK. Everything worked as expected.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user_id\": \"{{New_Comment_Name}}\",\r\n    \"title\": \"{{New_Comment_Body}}\"\r\n}"
								},
								"url": {
									"raw": "{{URL}}/{{Comments_Endpoint}}/{{Update_Comment_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Comments_Endpoint}}",
										"{{Update_Comment_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Restore Comment from Backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d0ecce0-b7a7-4027-9cae-bcc3b15cfa0a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"OK. Everything worked as expected.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ab840253-4141-408a-bb7d-0c6ca708c899",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{savedData}}"
								},
								"url": {
									"raw": "{{URL}}/{{Comments_Endpoint}}/{{Update_Comment_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Comments_Endpoint}}",
										"{{Update_Comment_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Backup Comment Entry",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.globals.set(\"savedData\", JSON.stringify(jsonData.result));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Comments_Endpoint}}/{{Update_Comment_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Comments_Endpoint}}",
										"{{Update_Comment_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a Comment using PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d0ecce0-b7a7-4027-9cae-bcc3b15cfa0a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"OK. Everything worked as expected.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"post_id\": \"{{New_Comment_PostID}}\",\r\n    \"name\": \"{{New_Comment_Name}}\",\r\n    \"email\": \"{{New_Comment_Email}}\",\r\n    \"body\": \"{{New_Comment_Body}}\"\r\n}"
								},
								"url": {
									"raw": "{{URL}}/{{Comments_Endpoint}}/{{Update_Comment_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Comments_Endpoint}}",
										"{{Update_Comment_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Restore Comment from Backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d0ecce0-b7a7-4027-9cae-bcc3b15cfa0a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"OK. Everything worked as expected.\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ab840253-4141-408a-bb7d-0c6ca708c899",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{savedData}}"
								},
								"url": {
									"raw": "{{URL}}/{{Comments_Endpoint}}/{{Update_Comment_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Comments_Endpoint}}",
										"{{Update_Comment_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "36359e8f-0330-4e89-8c1b-46273ab0d2e5",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"Update_Comment_ID\", \"15\");",
									"",
									"pm.globals.set(\"New_Comment_PostID\", \"1234\");",
									"pm.globals.set(\"New_Comment_Name\", \"John Doh\");",
									"pm.globals.set(\"New_Comment_Email\", \"tester@test.com\")",
									"pm.globals.set(\"New_Comment_Body\", \"This is a test body section of text that is reall really long...\");",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6fd0d0c4-8f68-42d7-8daf-2bffa663b57f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "Delete the comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed1219c5-95c2-4ee4-9823-4e7f60a6e298",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(300);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The request was handled successfully and the response contains no body content.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Comments_Endpoint}}/{{Delete_Comment_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Comments_Endpoint}}",
										"{{Delete_Comment_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d3fce909-dc56-4cae-ad1b-320ef0958177",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"Delete_Comment_ID\", \"1\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ea8e4757-a648-4290-ad19-8ff2b1028222",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Negative Tests",
					"item": [
						{
							"name": "GET",
							"item": [
								{
									"name": "Negative - Return details of Comment by bad ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 400ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(400);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"The requested resource does not exist.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{URL}}/{{Comments_Endpoint}}/{{Bad_Comment_ID}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"{{Comments_Endpoint}}",
												"{{Bad_Comment_ID}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "PATCH/PUT",
							"item": [
								{
									"name": "Negative - Update a comment using PATCH, bad ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d0ecce0-b7a7-4027-9cae-bcc3b15cfa0a",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 300ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(300);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"The requested resource does not exist.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"user_id\": \"{{New_Post_UserID}}\",\r\n    \"title\": \"{{New_Post_Title}}\",\r\n    \"body\": \"{{New_Post_Body}}\"\r\n}"
										},
										"url": {
											"raw": "{{URL}}/{{Comments_Endpoint}}/{{Bad_Comment_ID}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"{{Comments_Endpoint}}",
												"{{Bad_Comment_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Negative - Update a comment using PUT, bad ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "188b508c-35d1-47f2-9253-e8d715f34e27",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 300ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(300);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"The requested resource does not exist.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"user_id\": \"{{New_Post_UserID}}\",\r\n    \"title\": \"{{New_Post_Title}}\",\r\n    \"body\": \"{{New_Post_Body}}\"\r\n}"
										},
										"url": {
											"raw": "{{URL}}/{{Comments_Endpoint}}/{{Bad_Comment_ID}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"{{Comments_Endpoint}}",
												"{{Bad_Comment_ID}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "DELETE",
							"item": [
								{
									"name": "Negative - Delete the comment but bad ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed1219c5-95c2-4ee4-9823-4e7f60a6e298",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 300ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(300);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"The requested resource does not exist.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL}}/{{Comments_Endpoint}}/{{Bad_Comment_ID}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"{{Comments_Endpoint}}",
												"{{Bad_Comment_ID}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "679fa660-7ca0-48cd-ba95-33f496b4f1a2",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"Bad_Comment_ID\", \"4567\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0ac89e2e-a2ee-4cd0-91b7-f7d9725a063d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "albums",
			"item": [
				{
					"name": "HEAD/OPT",
					"item": [
						{
							"name": "Show overview info of the Albums listing",
							"request": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Albums_Endpoint}}/",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Albums_Endpoint}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Show the supported verbs of Albums",
							"request": {
								"method": "OPTIONS",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Albums_Endpoint}}/1",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Albums_Endpoint}}",
										"1"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "List all albums",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ea071d9-bf16-4402-b3c0-59b97e9425c1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Albums_Endpoint}}/",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Albums_Endpoint}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the details of album by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Albums_Endpoint}}/{{Album_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Albums_Endpoint}}",
										"{{Album_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List albums by user ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the album user id \" + pm.variables.get(\"Album_UserID\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"Album_UserID\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Albums_Endpoint}}/?user_id={{Album_UserID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Albums_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{Album_UserID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List albums by title",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the post title \" + pm.variables.get(\"Album_Title\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"Album_Title\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Albums_Endpoint}}/?title={{Album_Title}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Albums_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "title",
											"value": "{{Album_Title}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2709583a-6115-475a-bf97-0d735512a686",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3139e056-6565-4d58-9246-08e264cfb799",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Response time is less than 300ms\", function () { pm.expect(pm.response.responseTime).to.be.below(300); });",
									"",
									"pm.test(\"Check for OK message\", function () { pm.expect(pm.response.text()).to.include(\"OK. Everything worked as expected.\"); });",
									"",
									"tests[\"API user_id is Present\"] = responseBody.has(\"user_id\");",
									"tests[\"API title is Present\"] = responseBody.has(\"title\");",
									"",
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "photos",
			"item": [
				{
					"name": "HEAD/OPT",
					"item": [
						{
							"name": "Show overview info of the Photos listing",
							"request": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Photos_Endpoint}}/",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Photos_Endpoint}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Show the supported verbs of Photos",
							"request": {
								"method": "OPTIONS",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Photos_Endpoint}}/1",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Photos_Endpoint}}",
										"1"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "List all Photos",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ea071d9-bf16-4402-b3c0-59b97e9425c1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Photos_Endpoint}}/",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Photos_Endpoint}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the details of photo by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Photos_Endpoint}}/{{Photo_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Photos_Endpoint}}",
										"{{Photo_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List photos by album ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the album id \" + pm.variables.get(\"Photo_AlbumID\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"Photo_AlbumID\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Photos_Endpoint}}/?album_id={{Photo_AlbumID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Photos_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "album_id",
											"value": "{{Photo_AlbumID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List photos by title",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the photo title \" + pm.variables.get(\"Photo_Title\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"Photo_Title\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Photos_Endpoint}}/?title={{Photo_Title}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Photos_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "title",
											"value": "{{Photo_Title}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List photos by url",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the photo url \" + pm.variables.get(\"Photo_Url\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"Photo_Url\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Photos_Endpoint}}/?url={{Photo_Url}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Photos_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "url",
											"value": "{{Photo_Url}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List photos by thumbnail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19e8a61a-0c8e-46db-a85f-4bfec4a60202",
										"exec": [
											"pm.test(\"Body contains the photo thumbnail \" + pm.variables.get(\"Photo_Thumbnail\") + \" in results\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"Photo_Thumbnail\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/{{Photos_Endpoint}}/?thumbnail={{Photo_Thumbnail}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"{{Photos_Endpoint}}",
										""
									],
									"query": [
										{
											"key": "thumbnail",
											"value": "{{Photo_Thumbnail}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eef9a86d-6c00-4dec-9166-6b90cf2c2ce2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6185b71c-dd6b-4e79-9052-0a2470bc0f5c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"pm.test(\"Response time is less than 300ms\", function () { pm.expect(pm.response.responseTime).to.be.below(300); });",
									"",
									"pm.test(\"Check for OK message\", function () { pm.expect(pm.response.text()).to.include(\"OK. Everything worked as expected.\"); });",
									"",
									"tests[\"API album_id is Present\"] = responseBody.has(\"album_id\");",
									"tests[\"API title is Present\"] = responseBody.has(\"title\");",
									"tests[\"API url is Present\"] = responseBody.has(\"url\");",
									"tests[\"API thumbnail is Present\"] = responseBody.has(\"thumbnail\");",
									"",
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{Auth_Token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "0f858c68-b15e-46d0-b47a-12295c536f14",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "c0a8a227-b058-43d1-834e-cb727c0d1eda",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "66e3145d-ee83-4e84-8134-9a25457ae9e9",
			"key": "Comments_Endpoint",
			"value": "public-api/comments",
			"type": "string"
		},
		{
			"id": "d2343755-297d-4db0-8293-52a7443ad038",
			"key": "Comment_ID",
			"value": "3",
			"type": "string"
		},
		{
			"id": "c17454c3-29cc-4ffa-aaf3-f5e91bd2dada",
			"key": "Comment_PostID",
			"value": "2790",
			"type": "string"
		},
		{
			"id": "c990123a-ae94-4a04-8f66-f361899ce65f",
			"key": "Comment_Name",
			"value": "Maximillian",
			"type": "string"
		},
		{
			"id": "114a330a-dc19-4dab-9741-5f86b0ace9e0",
			"key": "Comment_Email",
			"value": "@hotmail.com",
			"type": "string"
		},
		{
			"id": "64aa8f4b-72be-4caa-b849-12ec5a9e898b",
			"key": "Comment_Body",
			"value": "veritatis",
			"type": "string"
		},
		{
			"id": "7b0b7681-9e0a-46eb-bc18-4995c2717afe",
			"key": "Albums_Endpoint",
			"value": "public-api/albums",
			"type": "string"
		},
		{
			"id": "59439677-0b34-4fd9-8e47-4cddd5ea7e49",
			"key": "Album_ID",
			"value": "17",
			"type": "string"
		},
		{
			"id": "a38c92d0-2567-44a3-b8d2-4b91ae77e23f",
			"key": "Album_UserID",
			"value": "1115",
			"type": "string"
		},
		{
			"id": "727901bc-d538-4418-8f35-990ed38bca5f",
			"key": "Album_Title",
			"value": "quidem",
			"type": "string"
		},
		{
			"id": "d89dfaa6-3187-47de-8d67-2e658b78bb73",
			"key": "Photos_Endpoint",
			"value": "public-api/photos",
			"type": "string"
		},
		{
			"id": "318323af-8606-4770-9da3-15adbefc4129",
			"key": "Photo_ID",
			"value": "6",
			"type": "string"
		},
		{
			"id": "467ddbd4-98ea-436e-83db-2735b1bf2d24",
			"key": "Photo_AlbumID",
			"value": "970",
			"type": "string"
		},
		{
			"id": "88262dbd-3762-4530-95f5-e66e92a32ef6",
			"key": "Photo_Title",
			"value": "dolorem",
			"type": "string"
		},
		{
			"id": "3dcb2032-cb2f-4259-8a60-9ca8cd4b0d10",
			"key": "Photo_Url",
			"value": "lorempixel.com",
			"type": "string"
		},
		{
			"id": "6e749af0-22d6-4db2-9cf1-95f6a0328c63",
			"key": "Photo_Thumbnail",
			"value": "lorempixel.com",
			"type": "string"
		},
		{
			"id": "f212f81d-b86a-4f1c-a2d8-fca19990812a",
			"key": "URL",
			"value": "https://gorest.co.in",
			"type": "string"
		},
		{
			"id": "30d3eee4-5e06-420c-bc2f-4186a4f2ec62",
			"key": "Auth_Token",
			"value": "OCcRe6cGpZXuzm0KhBRaJ_nTUnjt4lbDb6Aa",
			"type": "string"
		},
		{
			"id": "72302ce8-674d-4552-8945-45e42d50d17a",
			"key": "Bad_Auth_Token",
			"value": "AbCdEfG12345",
			"type": "string"
		}
	]
}